'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/','title':"Index",'section':"Sound Hacking",'content':"The idea behind the Sound Hacking github organisation is to take advantage of the latest advances of Machine learning and Audio processing to create innovative applications.\nInteractive sound input\r#\r\r inputs in microcontrollers for preprocessing interface to PC for further processing. it\u0026rsquo;s also possible to have microcontroller standalone applications  \rDebug workflow\r#\r\r it\u0026rsquo;s possible to debug an embedded sound processing system by injecting packets and retrieving the results  \rDiscord channel\r#\r\r\r\r invitation to the Sound Hacking discord server A place to ask questions, make suggestions and see posts about the progress  Topics\r#\r\rOffline Preparation\r#\r\rThe Offline preparation is a necessary step to understand the signal and condition it for the target application where it will be used, that\u0026rsquo;s where Python with its scientific toolkits and machine learning environment will be used.\n Signal Analysis Machine Learning  Real Time Processing\r#\r\rSmart applications are ones that instantly react to the user in an interactive, collaborative or assistive mode such as during tracking. Therefore an instant response of the system is what creates a feeling of connection with the instrument.\nReal time Audio processing requires dedicated hardware acceleration to prevent delays.\nCapture\r#\r\rIt\u0026rsquo;s about capture of audio and other user inputs. Audio goes through I2S microphone arrays connected to microcontrollers. Other user inputs can be accelerometer or touch interfaces that are to be used as control for sound generation\n Microphones Accelerometers smart touch surface USB interfaces (Audio / HID / Serial Data)  Display\r#\r\rThe output should not only be hearable as a sound signal but also visual in order to assist the interaction.\n webapp view of live audio signal Status feedback through LEDs  Microcontrollers\r#\r\r\r MEMS microphones : SPH0645 STM32F407VGT6  Microcontrollers in scope :\n STM32 based on ARM-M4  Black pill : STM32F411 (USB) Audio Discovery : STM32F407 (USB, stereo out) DevEBox : STM32F407 (USB, SDCARD)   ESP32 (wifi / BT) nRF52 (custom RF / BT)  Example integration of cubemx with pio :\n f411_piocube_lib_blink  Repositories\r#\r\rpystream\r#\r\r List audio devices Test Audio input and output connect inputs to outputs process the live stream between input and output generate tone  dependencies\r#\r\r matplotlib numpy sounddevice  see sound\r#\r\r a web app framework to see the sound in different forms real-time analysis of played audio Playing sound with html5 web Audio API Live demo  \rlibrosa_demo\r#\r\r Jupyter notebooks to showcase librosa functions  \r"});})();